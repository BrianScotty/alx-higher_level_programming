How the ``0-add_integer test`` module works
===========================================

Module that tests integer addition module ``add_integer(a, b=98)``.


    >>> add_integer = __import__('0-add_integer').add_integer

Tests:

Checking for module docstring:

    >>> m = __import__("0-add_integer").__doc__
    >>> len(m) > 1 
    True

Checking for function docstring:

    >>> f = __import__("0-add_integer").add_integer.__doc__
    >>> len(f) > 1
    True
         
Basic usage:

    >>> add_integer(2, 5)
    7
    
Test int argument:

    >>> add_integer(1)
    99

Test int argument and check default second:

    >>> add_integer(0)
    98

Checking positive with negative:

    >>> add_integer(2, -5)
    -3

Checking negative with positive:

    >>> add_integer(-5, 9)
    4

Checking addition over multiple values:

    >>> [add_integer(i, i * 3) for i in range(6)]
    [0, 4, 8, 12, 16, 20]

Float and negative input:

    >>> add_integer(20.3, -2)
    18

Float overflow:

    >>> add_integer(1.5)
    99

Float NaN:

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

String input:

    >>> add_integer(4, "ALX")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

None input:

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Double negative float input:

    >>> add_integer(-1.5, -6.2)
    -7

Double string input:

    >>> add_integer("holberton", "school")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
